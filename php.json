{
  "drhookupdaten": {
    "prefix": "drhookupdaten",
    "body": [
      "/**",
      " * Implements hook_update_N().",
      " */",
      "function kh_components_migration_update_10001(&\\$sandbox) {",
      "  \\$per_run = 5;",
      "  \\$paragraph_storage = \\Drupal::entityTypeManager()->getStorage('paragraph');",
      "",
      "  if (empty(\\$sandbox['run_once'])) {",
      "    \\$query = \\Drupal::entityQuery('paragraph');",
      "    \\$query = \\$query",
      "      ->condition('type', 'featured_insights')",
      "      ->condition('field_result_count', 5);",
      "    \\$ids = \\$query->accessCheck(FALSE)->execute();",
      "    \\$sandbox['ids'] = \\$ids;",
      "    \\$sandbox['#finished'] = FALSE;",
      "    \\$sandbox['run_once'] = TRUE;",
      "  }",
      "",
      "  if (!empty(\\$sandbox['ids'])) {",
      "    \\$ids = array_splice(\\$sandbox['ids'], 0, \\$per_run);",
      "    foreach (\\$ids as \\$pid) {",
      "      \\$paragraph = \\$paragraph_storage->load(\\$pid);",
      "      \\$paragraph->field_result_count->value = 4;",
      "      \\$paragraph->save();",
      "    }",
      "  }",
      "  else {",
      "    \\$sandbox['#finished'] = TRUE;",
      "  }",
      "}"
    ]
  },
  "drincludefile": {
    "prefix": "drincludefile",
    "body": [
      "\\Drupal::moduleHandler()->loadInclude('kh_components_migration', 'inc', 'kh_components_migration.post_migration');"
    ]
  },
  "drrefreshmigrations": {
    "prefix": "drrefreshmigration",
    "body": [
      "/**",
      " * Help us bypass rebuilding all caches when we make changes to migration files, which often takes a very long time.",
      " *",
      " * This reads the migrations files inside \"migrations\" folder and upates the \"cache_discovery_migration\" table dynamically.",
      " *",
      " * We just need to edit migration files and then invoke this function.",
      " *",
      " * How to use:",
      " * ddev drush php-eval \"_migration_refresh_migration_files()\"",
      " */",
      "function _migration_refresh_migration_files() {",
      "  /** @var string \\$path_to_migrations_dir */",
      "  \\$path_to_migrations_dir = \"modules/custom/kh_components_migration/migrations\";",
      "",
      "  \\$database = \\Drupal::database();",
      "",
      "  \\$schema = \\$database->schema();",
      "",
      "  // If there is no `cache_discovery_migration` table, exit early.",
      "  if (!\\$schema->tableExists('cache_discovery_migration')) { return; }",
      "",
      "  \\$result = \\$database->query('SELECT data FROM {cache_discovery_migration} WHERE cid = :cid', [",
      "    ':cid' => 'migration_plugins'",
      "  ])->fetchAll();",
      "",
      "  \\$there_is_something_to_update = FALSE;",
      "",
      "  if (is_array(\\$result)) {",
      "    if (empty(\\$result)) {",
      "      // If \\$result is empty, it is likely that all caches were flushed.",
      "      // Do nothing.",
      "    }",
      "    else {",
      "      \\$result = reset(\\$result);",
      "      if (property_exists(\\$result, 'data')) {",
      "        \\$there_is_something_to_update = TRUE;",
      "        \\$result = \\$result->data;",
      "        \\$result = unserialize(\\$result);",
      "      }",
      "    }",
      "",
      "    if (\\$there_is_something_to_update) {",
      "      foreach (scandir(\\$path_to_migrations_dir) as \\$file_name) {",
      "        if (str_contains(\\$file_name, '.yml')) {",
      "          \\$migration_file = \"{\\$path_to_migrations_dir}/{\\$file_name}\";",
      "          \\$current_migration = Yaml::decode(file_get_contents(\\$migration_file));",
      "          // By default, Drupal treats each migration as `Drupal\\migrate\\Plugin\\Migration` instance.",
      "          if (is_array(\\$current_migration) && !isset(\\$current_migration['class'])) {",
      "            \\$current_migration['class'] = 'Drupal\\migrate\\Plugin\\Migration';",
      "          }",
      "          // Strips the \"yml\" extension to get the migration ID.",
      "          \\$id = str_replace(\".yml\", \"\", \\$file_name);",
      "          \\$result[\\$id] = \\$current_migration;",
      "        }",
      "      }",
      "",
      "      \\$result = serialize(\\$result);",
      "      \\$database->update('cache_discovery_migration')",
      "        ->fields(['data' => \\$result])",
      "        ->condition('cid', 'migration_plugins')",
      "        ->execute();",
      "    }",
      "  }",
      "}"
    ]
  },
  "ddevsolr": {
    "prefix": "ddevsolr",
    "body": [
      "/**",
      " * Search API",
      " */",
      "// Replace the <SERVER_MACHINE_NAME> and <INDEX_MACHINE_NAME>",
      "// with correct value; e.g. `default_solr`, `acquia_solr`, etc.",
      "// The server is configured by config/sync/search_api.server.*",
      "\\$config['search_api.server.<SERVER_MACHINE_NAME>']['backend_config']['connector'] = 'standard';",
      "\\$config['search_api.server.<SERVER_MACHINE_NAME>']['backend_config']['connector_config']['scheme'] = 'http';",
      "\\$config['search_api.server.<SERVER_MACHINE_NAME>']['backend_config']['connector_config']['host'] = 'solr';",
      "\\$config['search_api.server.<SERVER_MACHINE_NAME>']['backend_config']['connector_config']['port'] = '8983';",
      "\\$config['search_api.server.<SERVER_MACHINE_NAME>']['backend_config']['connector_config']['path'] = '/';",
      "\\$config['search_api.server.<SERVER_MACHINE_NAME>']['backend_config']['connector_config']['core'] = 'dev';",
      "// The index is configured by config/sync/search_api.index.*.yml",
      "\\$config['search_api.index.<INDEX_MACHINE_NAME>']['server'] = '<SERVER_MACHINE_NAME>';",
      "\\$config['search_api.index.<INDEX_MACHINE_NAME>']['status'] = TRUE;",
      "// The attachments is configured by config/sync/search_api_attachments.admin_config.yml",
      "\\$config['search_api_attachments.admin_config']['solr_extractor_configuration']['solr_server'] = '<SERVER_MACHINE_NAME>';"
    ]
  },
  "drparagraphstorage": {
    "prefix": "drparagraphstorage",
    "body": [
      "\\$paragraph_storage = \\Drupal::entityTypeManager()->getStorage('paragraph');"
    ]
  },
  "drbatch": {
    "prefix": "drbatch",
    "body": [
      "function custom_batch() {",
      "  \\$entities = [];",
      "",
      "  \\$batch = [",
      "    'title' => t(''),",
      "    'operations' => [",
      "      [",
      "        'load_entities_into_chunks',",
      "        [\\$entities,],",
      "      ]",
      "    ],",
      "    'finished' => NULL,",
      "  ];",
      "",
      "  // Set the batch",
      "  batch_set(\\$batch);",
      "  // If we are setting the batch in the back-end (no UI whatsoever), we need to trigger it manually.",
      "  // drush_backend_batch_process();",
      "}",
      "",
      "function load_entities_into_chunks(\\$entities, &\\$context) {",
      "\t\\$chunk_size = 5;",
      "\tif (!isset(\\$context['results']['resaved'])) {",
      "    \\$context['results']['resaved'] = [];",
      "  }",
      "  // Exit early if there is nothing to process.",
      "  if (empty(\\$entities) || !\\$entities) { ",
      "    return; ",
      "  }",
      "\t// Initialize the sandbox by populating some metrics to keep track of progress, the total size, ",
      "  // the entities which are reduced in place when some entities inside are processed.",
      "  \\$sandbox = &\\$context['sandbox'];",
      "  if (!\\$sandbox) {",
      "    \\$sandbox['progress'] = 0;",
      "    \\$sandbox['max'] = count(\\$entities);",
      "    \\$sandbox['entities'] = \\$entities;",
      "  }",
      "\t// Get the first/next \\$chunk_size number of entities for processing.",
      "  \\$slice = array_splice(\\$sandbox['entities'], 0, \\$chunk_size);",
      "  // There is a glitch during the batch processing because:",
      "  // We are at the end of the \\$entities (i.e \\$slice is empty)",
      "  // but the progress is not at 100% yet.",
      "  if (count(\\$slice) === 0 && \\$sandbox['progress'] / \\$sandbox['max'] < 1) {",
      "    // We use \\$context['results']['resaved'] as the source of truth so as to",
      "    // determine the entities that we missed earlier.",
      "    \\$resaved_entities = \\$context['results']['resaved'];",
      "    \\$unresaved_entities = array_diff(\\$entities, \\$resaved_entities);",
      "    \\$slice = array_splice(\\$unresaved_entities, 0, \\$chunk_size);",
      "  }",
      "",
      "  foreach (\\$slice as \\$each) {",
      "    // Update the message.",
      "    if (\\$each instanceof NodeInterface || \\$each instanceof ParagraphInterface) {",
      "      \\$context['message'] = t('Processing node @nid', ['@nid' => \\$each->label()]);",
      "    }",
      "    elseif (\\$each instanceof stdClass && property_exists(\\$each, 'nid')) {",
      "      \\$context['message'] = t('Processing node @nid', ['@nid' => \\$each->nid]);",
      "    }",
      "    elseif (is_string(\\$each) || is_int(\\$each)) {",
      "      \\$context['message'] = t('Processing node @nid', ['@nid' => \\$each]);",
      "    }",
      "",
      "    // Invoke the logic on each entity.",
      "\t\t// See next step.",
      "\t\tprocess_entity(\\$each);",
      "",
      "    // Update the `resaved` set.",
      "    if (\\$each instanceof NodeInterface || \\$each instanceof ParagraphInterface) {",
      "      \\$context['results']['resaved'][] = \\$each->label();",
      "    }",
      "    elseif (\\$each instanceof stdClass && property_exists(\\$each, 'nid')) {",
      "      \\$context['results']['resaved'][] = \\$each->nid;",
      "    }",
      "    elseif (is_string(\\$each) || is_int(\\$each)) {",
      "      \\$context['results']['resaved'][] = \\$each;",
      "    }",
      "    // Update progress.",
      "    \\$sandbox['progress']++;",
      "  }",
      "  \\$context['finished'] = \\$sandbox['progress'] / \\$sandbox['max'];",
      "}",
      "",
      "function process_entity(\\$entity) {",
      "\t// NULL means nothing, exit early.",
      "  if (is_null(\\$entity)) {",
      "    return;",
      "  }",
      "  // Sometimes we pass in NID; In that case, we try to load the node.",
      "  if (!(\\$entity instanceof NodeInterface)) {",
      "    \\$node = Node::load(\\$entity);",
      "  }",
      "  // There is no such node, exit early.",
      "  if (!(\\$node instanceof Node)) {",
      "    return;",
      "  }",
      "",
      "  // \\$node",
      "}"
    ]
  },
  "drdevelopmentservices": {
    "prefix": "drdevelopmentservices",
    "body": [
      "# Local development services.",
      "# To activate this feature, follow the instructions at the top of the",
      "# 'example.settings.local.php' file, which sits next to this file.",
      "parameters:",
      "  http.response.debug_cacheability_headers: false",
      "  twig.config:",
      "    auto_reload: true",
      "    cache: false",
      "    debug: true",
      "  cors.config:",
      "    enabled: true",
      "    # Specify allowed headers, like 'x-allowed-header'.",
      "    allowedHeaders: ['x-csrf-token','authorization','content-type','accept','origin','x-requested-with', 'access-control-allow-origin','x-allowed-header','*']",
      "    # Specify allowed request methods, specify ['*'] to allow all possible ones.",
      "    allowedMethods: ['*']",
      "    # Configure requests allowed from specific origins.",
      "    allowedOrigins: ['http://localhost/','http://localhost:3000','http://localhost:3001','http://localhost:3002','*']",
      "    # Sets the Access-Control-Expose-Headers header.",
      "    exposedHeaders: false",
      "    # Sets the Access-Control-Max-Age header.",
      "    maxAge: false",
      "    # Sets the Access-Control-Allow-Credentials header.",
      "    supportsCredentials: true",
      "services:",
      "  cache.backend.null:",
      "    class: Drupal\\Core\\Cache\\NullBackendFactory",
      "  lock:",
      "    class: Drupal\\Core\\Lock\\DatabaseLockBackend",
      "    arguments: ['@database']",
      "    tags:",
      "      - { name: backend_overridable }",
      "    lazy: true",
      "  lock.persistent:",
      "    class: Drupal\\Core\\Lock\\PersistentDatabaseLockBackend",
      "    arguments: ['@database']",
      "    tags:",
      "      - { name: backend_overridable }",
      "    lazy: true"
    ]
  },
  "drentityreferencerevisions": {
    "prefix": "drentityreferencerevisions",
    "body": [
      "/** @var Drupal\\paragraphs\\Entity\\Paragraph $p1 */",
      "$p1 = NULL;",
      "/** @var Drupal\\paragraphs\\Entity\\Paragraph $p2 */",
      "$p2 = NULL;",
      "// Field `field_components` is ",
      "// - an \"Entity reference revisions\" field which references paragraphs",
      "// - an unlimited-cardinality field",
      "$node->field_components = [",
      "  [",
      "    'target_id'          => $p1->id(),",
      "    'target_revision_id' => $p1->getRevisionId(),",
      "  ],",
      "  [",
      "    'target_id'          => $p2->id(),",
      "    'target_revision_id' => $p2->getRevisionId(),",
      "  ],",
      "];",
      "$node->save();"
    ]
  },
  "drsetinstalledversion": {
    "prefix": "drsetinstalledversion",
    "body": [
      "\\Drupal::service('update.update_hook_registry')->setInstalledVersion('', 10000);"
    ]
  },
  "drincludeddevsettings": {
    "prefix": "drincludeddevsettings",
    "body": [
      "// Automatically generated include for settings managed by ddev.",
      "if (getenv('IS_DDEV_PROJECT') == 'true' && file_exists(__DIR__ . '/settings.ddev.php')) {",
      "  include __DIR__ . '/settings.ddev.php';",
      "}",
      ""
    ]
  },
  "drincludedevelopmentservices": {
    "prefix": "drincludedevelopmentservices",
    "body": [
      "/**",
      " * Enable local development services.",
      " */",
      "\\$settings['container_yamls'][] = DRUPAL_ROOT . '/sites/development.services.yml';"
    ]
  }
}